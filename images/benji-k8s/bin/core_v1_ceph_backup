#!/usr/bin/env python3
import argparse
import logging
import random
import string
import sys
import time
from typing import Any, Dict, Optional, Tuple

import kubernetes
import kubernetes.stream

import benji.helpers.ceph as ceph
import benji.helpers.kubernetes
import benji.helpers.prometheus as prometheus
import benji.helpers.utils as utils

FSFREEZE_TIMEOUT = 15
FSFREEZE_UNFREEZE_TRIES = (0, 1, 1, 1, 15, 30)
FSFREEZE_ANNOTATION = 'benji-backup.me/fsfreeze'
FSFREEZE_POD_LABEL_SELECTOR = 'benji-backup.me/component=fsfreeze'
FSFREEZE_CONTAINER_NAME = 'fsfreeze'
KUBELET_MOUNT_PATH_FORMAT = '/var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/rbd-image-{}'

utils.setup_logging()
logger = logging.getLogger()


def _random_string(length: int, characters: str = string.ascii_lowercase + string.digits) -> str:
    return ''.join(random.choice(characters) for _ in range(length))


@ceph.signal_backup_pre.connect
def ceph_backup_pre(sender: str, volume: str, pool: str, image: str, version_labels: Dict[str, str],
                    context: Dict[str, Any]):
    assert isinstance(context, dict)
    context['backup-start-time'] = start_time = time.time()
    prometheus.backup_start_time.labels(volume=volume).set(start_time)


def _k8s_create_pvc_event(type: str, reason: str, message: str, context: Dict[str, Any]):
    assert isinstance(context, dict)
    assert 'pvc' in context
    pvc_namespace = context['pvc'].metadata.namespace
    pvc_name = context['pvc'].metadata.name
    pvc_uid = context['pvc'].metadata.uid

    try:
        benji.helpers.kubernetes.create_pvc_event(type=type,
                                                  reason=reason,
                                                  message=message,
                                                  pvc_namespace=pvc_namespace,
                                                  pvc_name=pvc_name,
                                                  pvc_uid=pvc_uid)
    except Exception as exception:
        logger.error(f'Creating Kubernetes event for {pvc_namespace}/{pvc_name} failed with a {exception.__class__.__name__} exception: {str(exception)}')
        pass


@ceph.signal_backup_post_success.connect
def ceph_backup_post_success(sender: str, volume: str, pool: str, image: str, version_labels: Dict[str, str],
                             context: Dict[str, Any], version: Optional[Dict]):
    assert isinstance(context, dict)
    assert version is not None

    pvc_namespace = context['pvc'].metadata.namespace
    pvc_name = context['pvc'].metadata.name
    pvc_uid = context['pvc'].metadata.uid
    start_time = context['backup-start-time']

    completion_time = time.time()
    prometheus.backup_completion_time.labels(volume=volume).set(completion_time)
    prometheus.backup_runtime_seconds.labels(volume=volume).set(completion_time - start_time)
    prometheus.backup_status_succeeded.labels(volume=volume).set(1)

    try:
        benji.helpers.kubernetes.create_pvc_event(
            type='Normal',
            reason='SuccessfulBackup',
            message=f'Backup to {version["uid"]} completed successfully (took {completion_time - start_time:.0f} seconds).',
            pvc_namespace=pvc_namespace,
            pvc_name=pvc_name,
            pvc_uid=pvc_uid)
    except Exception as exception:
        logger.error(f'Creating Kubernetes event for {pvc_namespace}/{pvc_name} failed with a {exception.__class__.__name__} exception: {str(exception)}')
        pass


@ceph.signal_backup_post_error.connect
def ceph_backup_post_error(sender: str, volume: str, pool: str, image: str, version_labels: Dict[str, str],
                           context: Dict[str, Any], version: Optional[Dict], exception: Exception):
    assert isinstance(context, dict)
    pvc_namespace = context['pvc'].metadata.namespace
    pvc_name = context['pvc'].metadata.name
    pvc_uid = context['pvc'].metadata.uid

    start_time = context['backup-start-time']
    completion_time = time.time()

    prometheus.backup_completion_time.labels(volume=volume).set(completion_time)
    prometheus.backup_runtime_seconds.labels(volume=volume).set(completion_time - start_time)
    prometheus.backup_status_failed.labels(volume=volume).set(1)

    benji.helpers.kubernetes.create_pvc_event(type='Warning',
                                              reason='FailedBackup',
                                              message=f'Backup failed: {exception.__class__.__name__} {str(exception)}',
                                              pvc_namespace=pvc_namespace,
                                              pvc_name=pvc_name,
                                              pvc_uid=pvc_uid)

    raise exception


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, allow_abbrev=False)

parser.add_argument(metavar='pvc_namespace', dest='pvc_namespace', help='PVC namespace')
parser.add_argument(metavar='pvc', dest='pvc', help='PVC name')

args = parser.parse_args()

pvc = core_v1_api.read_namespaced_persistent_volume_claim(name=args.pvc, namespace=args.pvc_namespace)

if not hasattr(pvc.spec, 'volume_name') or pvc.spec.volume_name in (None, ''):
    raise RuntimeError(f'PersistentVolumeClaim {args.pvc_namespace}/{args.pvc} has no associated PersitentVolume.')

pv = core_v1_api.read_persistent_volume(pvc.spec.volume_name)
pool, image = benji.helpers.kubernetes.determine_rbd_image_location(pv)

if pool is None or image is None:
    raise RuntimeError(f'PersistentVolumeClaim {pvc.metadata.name} is backed by an unknown PV type.')

volume = f'{pvc.metadata.namespace}/{pvc.metadata.name}'
# Limit the version_uid to 253 characters so that it is a compatible Kubernetes resource name.
version_uid = '{}-{}'.format(f'{pvc.metadata.namespace}-{pvc.metadata.name}'[:246], _random_string(6))

version_labels = benji.helpers.kubernetes.build_version_labels_rbd(pvc=pvc,
                                                                   pv=pv,
                                                                   pool=pool,
                                                                   image=image,
                                                                   cluster_fsid=ceph.cluster_fsid())

context = {'pvc': pvc}
version = ceph.backup(volume=volume,
                      pool=pool,
                      image=image,
                      version_uid=version_uid,
                      version_labels=version_labels,
                      context=context)

benji.helpers.kubernetes.BenjiVersionResource.create_or_replace(version=version)

prometheus.push(prometheus.backup_registry)
sys.exit(0)
