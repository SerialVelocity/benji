#!/usr/bin/env python3
import argparse
import os
import sys

from webargs import fields

import benji.helpers.ceph as ceph
from benji.amqp import AMQPRPCServer
from benji.config import Config
from benji.logging import logger, init_logging

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, allow_abbrev=False)
parser.add_argument('-c', '--config-file', default=None, type=str, help='Specify a non-default configuration file')
parser.add_argument('--log-level',
                    choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                    default='INFO',
                    help='Only log messages of this level or above on the console')
parser.add_argument('--no-color', action='store_true', default=False, help='Disable colorization of console logging')
parser.add_argument(metavar='queue', dest='queue', help='AMQP queue to consume from')
args = parser.parse_args()

if args.config_file is not None and args.config_file != '':
    try:
        cfg = open(args.config_file, 'r', encoding='utf-8').read()
    except FileNotFoundError:
        logger.error('File {} not found.'.format(args.config_file))
        sys.exit(os.EX_USAGE)
    config = Config(ad_hoc_config=cfg)
else:
    config = Config()

init_logging(config.get('logFile', types=(str, type(None))),
             console_level=args.log_level,
             console_formatter='console-plain' if args.no_color else 'console-colored')

rpc_server = AMQPRPCServer(queue=args.queue, inactivity_timeout=120)


@rpc_server.register_as_task()
def ceph_v1_backup(version_uid: fields.Str(required=True), volume: fields.Str(required=True),
                   pool: fields.Str(required=True), image: fields.Str(required=True),
                   version_labels: fields.Dict(keys=fields.Str(), values=fields.Str(), missing={})):
    return ceph.backup(volume=volume, pool=pool, image=image, version_uid=version_uid, version_labels=version_labels)


@rpc_server.register_as_task()
def ceph_v1_restore(version_uid: fields.Str(required=True), pool: fields.Str(required=True),
                    image: fields.Str(required=True)):
    return ceph.restore(version_uid=version_uid, pool=pool, image=image)


rpc_server.serve()
sys.exit(0)
